# Test result by using solution of w2, b2, w3, b3

import numpy as np
import UserMath

data = ([[1, 1, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[0, 1, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[1, 1, 0], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[1, 1, 1], [1, 0, 1], [1, 0, 1], [1, 1, 0]],
        [[1, 1, 1], [1, 0, 1], [1, 0, 1], [0, 1, 1]],
        [[0, 0, 0], [1, 1, 1], [1, 0, 1], [1, 1, 1]],
        [[0, 0, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1]],
        [[0, 0, 0], [1, 1, 0], [1, 0, 1], [1, 1, 1]],
        [[0, 0, 0], [1, 1, 1], [1, 0, 1], [1, 1, 0]],
        [[0, 0, 0], [1, 1, 1], [1, 0, 1], [0, 1, 1]],
        [[1, 1, 1], [1, 0, 1], [1, 1, 1], [0, 0, 0]],
        [[0, 1, 1], [1, 0, 1], [1, 1, 1], [0, 0, 0]],
        [[1, 1, 0], [1, 0, 1], [1, 1, 1], [0, 0, 0]],
        [[1, 1, 1], [1, 0, 1], [1, 1, 0], [0, 0, 0]],
        [[1, 1, 1], [1, 0, 1], [0, 1, 1], [0, 0, 0]],
        [[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[1, 1, 1], [1, 0, 0], [1, 0, 1], [1, 1, 1]],
        [[1, 1, 1], [1, 0, 1], [1, 0, 0], [1, 1, 1]],
        [[1, 1, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]],
        [[1, 1, 1], [1, 0, 1], [0, 0, 1], [1, 1, 1]],
        [[1, 1, 1], [0, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[0, 0, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[0, 1, 1], [1, 0, 0], [0, 0, 1], [1, 1, 1]],
        [[0, 1, 1], [1, 0, 1], [1, 0, 0], [1, 1, 1]],
        [[0, 1, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1]],
        [[0, 1, 1], [1, 0, 1], [0, 0, 1], [1, 1, 1]],
        [[0, 1, 1], [0, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[1, 1, 0], [1, 0, 0], [1, 0, 1], [1, 1, 1]],
        [[1, 1, 0], [1, 0, 1], [1, 0, 0], [1, 1, 1]],
        [[1, 1, 0], [1, 0, 1], [1, 0, 1], [1, 0, 1]],
        [[1, 1, 0], [1, 0, 1], [0, 0, 1], [1, 1, 1]],
        [[1, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]],
        [[1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 1]],
        [[1, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 0]],
        [[1, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 1]],
        [[1, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1]],
        [[0, 1, 0], [0, 1, 1], [0, 1, 0], [0, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 1], [0, 1, 0]],
        [[1, 1, 0], [0, 1, 1], [0, 1, 0], [0, 1, 0]],
        [[1, 1, 0], [0, 1, 0], [0, 1, 1], [0, 1, 0]],
        [[0, 1, 0], [0, 1, 1], [0, 1, 0], [1, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 1], [1, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1]],
        [[1, 1, 0], [0, 1, 1], [0, 1, 1], [1, 1, 1]],
        [[1, 1, 0], [0, 1, 0], [0, 1, 0], [1, 1, 0]],
        [[0, 1, 1], [0, 1, 1], [0, 1, 1], [0, 1, 1]],
        [[1, 1, 0], [1, 1, 0], [0, 1, 0], [0, 1, 0]],
        [[1, 1, 0], [0, 1, 0], [1, 1, 0], [0, 1, 0]],
        [[1, 1, 0], [1, 1, 0], [1, 1, 0], [1, 1, 0]],
        [[1, 1, 0], [0, 1, 0], [0, 0, 0], [0, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 0], [1, 0, 0]],
        [[1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]],
        [[1, 0, 0], [0, 1, 0], [0, 1, 0], [0, 0, 1]],
        [[0, 1, 0], [0, 0, 0], [0, 1, 0], [1, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 0, 0], [1, 1, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 1, 0], [1, 1, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]],
        [[0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 1, 0], [0, 0, 1], [0, 0, 1], [0, 1, 0]],
        [[0, 1, 0], [1, 0, 0], [1, 0, 0], [0, 1, 0]])

w2 = np.array([[-1.91022814e-01,  1.87408211e-01,  3.76113509e-01, -1.71915669e+00,
   1.63701414e+00, -9.94118453e-01, -1.09887815e+00,  1.11114091e+00,
  -2.04585978e+00, -5.23446959e-01,  2.23580768e+00, -1.55345595e+00],
 [ 8.41935366e-02, -6.82397448e-01, -5.00551187e-01, 3.51811798e-01,
  -1.07407779e-04,  3.89869076e-02,  6.14612237e-01, -1.79909674e-01,
  -7.98262000e-03, -3.36236981e-01, -2.63284381e-01,  9.11279964e-01],
 [-1.72443026e-01, -3.67369925e-01,  9.05655414e-01,  1.02127167e+00,
  -6.34722690e-01,  1.17938155e+00,  2.29595905e+00, -6.94874421e-01,
   7.32824849e-01,  5.79507112e-01, -1.96607166e+00,  1.83565387e+00]],
              dtype=float)

# eg: w2[0][0], w2[1][5], w2[2][11]
b2 = np.array([[1.27390925], [-1.54787206], [-1.7517017]], dtype=float)
# eg: b2[0], b2[1], b2[2]

# Output layer weights and bias
w3 = np.array([[ 3.74912072, 0.73423725, -3.36534868],
                [-3.53463498, 1.26426257, 3.13982126]],
              dtype=float)

# eg: w3[0][0], w3[1][2]
b3 = np.array([ [-0.27889806],
                [-0.03239797]], dtype=float)
# eg: b3[0], b3[1]

a1 = np.zeros((12, 1))

testNo = 60
for testNo in range(0, 64):
    a1[0][0] = data[testNo][0][0]
    a1[1][0] = data[testNo][0][1]
    a1[2][0] = data[testNo][0][2]
    a1[3][0] = data[testNo][1][0]
    a1[4][0] = data[testNo][1][1]
    a1[5][0] = data[testNo][1][2]
    a1[6][0] = data[testNo][2][0]
    a1[7][0] = data[testNo][2][1]
    a1[8][0] = data[testNo][2][2]
    a1[9][0] = data[testNo][3][0]
    a1[10][0] = data[testNo][3][1]
    a1[11][0] = data[testNo][3][2]

    # Compute the values of Hidden layer.
    z2 = np.zeros((3, 1))
    z2 = np.dot(w2, a1) + b2
    # Activation function: Sigmoid(x) = 1/(1+exp(-x))
    a2 = np.zeros((3, 1))
    a2 = UserMath.Sigmoid(z2)

    # Compute the values of Output layer.
    z3 = np.zeros((2, 1))
    z3 = np.dot(w3, a2) + b3
    # Activation function: Sigmoid(x) = 1/(1+exp(-x))
    a3 = np.zeros((2, 1))
    a3 = UserMath.Sigmoid(z3)

    print(a3[1])
